<% provide(:title, 'Camera Roll') %>
<div class="container-fluid center " >
      <div class="row">
  <div class="span16" >
    <div class="row" style="margin-left:10px;">
      <div class="span4">
        <div id="div_cam_roll" style = "border:2px solid #ddd; width:150px; height:50px; padding:10px;  left:20px; text-align:right; z-index: 1; cursor:pointer;  background: url(/assets/cam_roll.png) no-repeat 10%; 
          "> 
        <h4 ><%= link_to "Camera Roll", albums_path, remote: true, id:"roll" %></h4></div>
      </div>
      <div class="span4">
        <div id="div_albums" style = "border:2px solid #ddd; width:150px; height:50px; padding:10px;  left:20px; text-align:right; z-index: 1; cursor:pointer; background: url(/assets/album_icon.png) no-repeat 10%; 
          " > 
        <h4 ><%= link_to " Albums", list_albums_path, remote: true %></h4></div>
      </div>
      <div style="display:none;">
      <%= link_to "Camera Roll", albums_path, remote: true, id:"link_cam_roll" %>
      <%= link_to " Albums", list_albums_path, id: "link_albums", remote: true %></div>
    </div>
  </div>
</div>

  <div class="row">

     <div  class="span16">
     <div id="floater-wrapper">
       <div id="image" style="display:none;">
          <!-- style="display:none"> -->
          <div id="floater" style="width:670px;align:center;" >
            <br>
           <h4 class="well pull-left span14" style="margin-left:30px;" ><a href="#" style="float:left;">Photos ready to be uploaded... </a>
            <%= form_for(@photo, :html => {:multipart => true}, id: "form_pic") do |f| %>
          <%= render 'shared/error_messages', object: f.object %>         
                  <%= f.fields_for :photos, Photo.new, :child_index => 'NEW_RECORD' do |photo_form| %>
                 
                   <%= photo_form.file_field :pic, id: "pic", :multiple => true,style: "width:1px; height:1px; padding:0px;  left:0px;" %>                <% end %>
          
          <%= hidden_field_tag :type, "user" %>  
          <%= f.submit "Upload", class: "btn primary" %>
          <%= link_to "cancel ",  "#", id: "cancelUpl",  class: "btn secondary" , style:"margin-left:5px;"%>
         <% end %></h4>

       </div>
          <canvas id="imageCanvas" style = "border: 1px solid #ddd; padding:5px; align:center" ></canvas>
       </div>
          
        <div id="preview"></div>

        <br>
       <div id="gallery" >
        <%= render 'albums/camera_roll' %>
        
      </div>
    </div>
  </div>
  </div>  
 </div> 
<script type="text/javascript">
$("#image_upload").click(function(){
      
   $("#image_upload").after($("div#image").html().replace('NEW_RECORD', new Date().getTime()) ); 
   
  });

$("#remove_image").click(function(){
  $("#pic").val("");
  $("#image").hide();
  $("#image_upload").show();

});

/*
$('img.image_al_c').load(function() {
    $(this).data('height', this.height);
}).bind('mouseenter mouseleave', function(e) {
    $(this).stop().animate({
        height: $(this).data('height') * (e.type === 'mouseenter' ? 1.5 : 1)
    });
});*/



$("#roll").click(function(){
  $("#image").hide();
  $("#gallery").show();
  $("#newAlbum").hide();
});
$("#cancelUpl").click(function(){
  $("#image").hide();
  $("#gallery").show();
  $("#newAlbum").hide();
});

$(".albumLink").click(function(){
  $("#image").hide();
  $("#gallery").show();
  $("#newAlbum").hide();
});

$("#div_cam_roll").click(function(){
  $("#link_cam_roll").click();
});

$("#div_albums").click(function(){
  $("#link_albums").click();
});


 

$(document).ready(function() {
    var imageLoader = document.getElementById('pic');
    imageLoader.addEventListener('change', handleImage, false);

  function handleImage(e){
    var canvas = document.getElementById('imageCanvas');
    var ctx = canvas.getContext('2d');
    var iCnt=0;
    var files = e.target.files;
    if(files.length==0){
      $("#image").hide();
      $("#gallery").show();
      $("#newAlbum").hide();
    }else{
      $("#image").show();
      $("#gallery").hide();
      $("#newAlbum").hide();
    }
    canvas.width = 600;
    canvas.height = 155*(Math.ceil(files.length/4));
    for( var i = 0, len = files.length; i < len; i++) 
          {
          if(files[i])
            {
              var reader = new FileReader();
              reader.onload = function(event){
                var img = new Image();

                img.onload = function(){
                  var ratioPx = 150;
                  var sWidth =ratioPx;
                  var ratio = img.width/sWidth;
                  var sHeight = img.height/ratio;   
                    if(sHeight>ratioPx){
                       sHeight =ratioPx;
                       ratio = img.height/sHeight;
                       sWidth = img.width/ratio;  
                    }
                  ctx.drawImage(img, 155*(iCnt%4),155*(Math.floor(iCnt/4)),sWidth,sHeight);
                  //ctx.drawImage(img,0,0,sWidth,sHeight);
                  iCnt++;
                }
                img.src = event.target.result;
              }
              reader.readAsDataURL(e.target.files[i]);     
            }
          }
  }

   $(window).scroll( function() {
        if ($(window).scrollTop() > ($('#floater-wrapper').offset().top)-40)
            $('#floater').addClass('floating');
         // console.log("addClass");
        else
            $('#floater').removeClass('floating');
         // console.log("removeClass");
    } );
/*

var fileinput = document.getElementById('pic');

var max_width = 300;
var max_height = 300;

var preview = document.getElementById('preview');

var canvas = document.getElementById('imageCanvas');
var form = document.getElementById('form_pic');

function processfile(file) {
  
    if( !( /image/i ).test( file.type ) )
        {
            alert( "File "+ file.name +" is not an image." );
            return false;
        }

    // read the files
    var reader = new FileReader();
    reader.readAsArrayBuffer(file);
    
    reader.onload = function (event) {
      // blob stuff
      var blob = new Blob([event.target.result]); // create blob...
      window.URL = window.URL || window.webkitURL;
      var blobURL = window.URL.createObjectURL(blob); // and get it's URL
      
      // helper Image object
      var image = new Image();
      image.src = blobURL;
      //preview.appendChild(image); // preview commented out, I am using the canvas instead
      image.onload = function() {
        // have to wait till it's loaded
        resized = resizeMe(image); // send it to canvas
        var newinput = document.createElement("input");
        newinput.type = 'hidden'
        newinput.name = 'images[]'
        fileinput.value = resized; // put result from canvas into new hidden input
        form.appendChild(newinput);
      }
    };
}

function readfiles(files) {
  
    // remove the existing canvases and hidden inputs if user re-selects new pics
    var existinginputs = document.getElementsByName('images[]');
    var existingcanvases = document.getElementsByTagName('canvas');
    while (existinginputs.length > 0) { // it's a live list so removing the first element each time
      // DOMNode.prototype.remove = function() {this.parentNode.removeChild(this);}
      form.removeChild(existinginputs[0]);
      preview.removeChild(existingcanvases[0]);
    } 
  
    for (var i = 0; i < files.length; i++) {
      processfile(files[i]); // process each file at once
    }
   // fileinput.value = ""; //remove the original files from fileinput
    // TODO remove the previous hidden inputs if user selects other files
}

// this is where it starts. event triggered when user selects files
fileinput.onchange = function(){
  if ( !( window.File && window.FileReader && window.FileList && window.Blob ) ) {
    alert('The File APIs are not fully supported in this browser.');
    return false;
    }
  readfiles(fileinput.files);
}

// === RESIZE ====

function resizeMe(img) {
  
  var canvas = document.createElement('canvas');

  var width = img.width;
  var height = img.height;

  // calculate the width and height, constraining the proportions
  if (width > height) {
    if (width > max_width) {
      //height *= max_width / width;
      height = Math.round(height *= max_width / width);
      width = max_width;
    }
  } else {
    if (height > max_height) {
      //width *= max_height / height;
      width = Math.round(width *= max_height / height);
      height = max_height;
    }
  }
  
  // resize the canvas and draw the image data into it
  canvas.width = width;
  canvas.height = height;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0, width, height);
  
  preview.appendChild(canvas); // do the actual resized preview
  
  return canvas.toDataURL("image/jpeg",0.8); // get the data from canvas as 80% JPG (can be also PNG, etc.)

}

*/


});






</script>
